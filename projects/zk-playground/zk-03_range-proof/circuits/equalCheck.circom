pragma circom 2.1.6;

/*
===============================================================================
파일 개요
-------------------------------------------------------------------------------
이 파일은 두 값의 "동등성"을 다루는 두 가지 템플릿을 제공합니다.

1) EnforceEqual
   - a와 b가 반드시 같아야만 증명이 생성 가능한 형태의 "강제 제약" 템플릿
   - 즉, a ≠ b이면 회로 제약을 만족할 수 없어 증명이 불가능합니다.

2) IsEqualBool
   - a와 b의 동등 여부를 boolean(0/1) 출력 eq로 표현하는 템플릿
   - 증명은 항상 생성 가능(출력 eq가 진실을 반영하도록 제약)하며, 소비자는 eq를 읽어 동등 여부를 판단합니다.

Circom 등식/대입 연산자 안내
-------------------------------------------------------------------------------
- `===` : 양변이 같다는 제약을 추가합니다. 내부적으로는 (LHS - RHS) === 0 으로 컴파일됩니다.
- `<==` : 왼쪽 신호에 값을 "연결"(대입)하면서 동일한 등식 제약도 함께 추가됩니다.
===============================================================================
*/

// 1) "동등함을 강제"하는 버전 (a == b 여야만 증명 생성 가능)
template EnforceEqual() {
    signal input a;
    signal input b;

    // 핵심 아이디어: a == b  ↔  a - b = 0
    // 아래 한 줄의 등식 제약으로 a와 b의 동등성을 "강제"합니다.
    // a == b  ↔  a - b = 0
    a - b === 0;
}

// 2) "동등 여부를 boolean으로 출력"하는 버전 (증명은 항상 생성 가능, eq가 정직해야 함)
template IsEqualBool() {
    signal input a;
    signal input b;
    signal output eq;
    signal inv;

    // eq는 반드시 0 또는 1
    eq * (eq - 1) === 0;

    // a != b 이면 eq=0 이어야 함
    (a - b) * eq === 0;

    // a == b 이면 eq=1 이 되도록 강제
    // (a - b) * inv = 1 - eq
    //  - a==b(=0)면 RHS가 0이 되어 1 - eq = 0 ⇒ eq=1
    //  - a!=b면 inv = 1/(a-b) 로 잡을 수 있어 1 - eq = 1 ⇒ eq=0
    (a - b) * inv === 1 - eq;
}

/*
// 단독 테스트용 (예시)
// component main = EnforceEqual();
// component main = IsEqualBool();
*/
